version: "3.8"

services:
  # Redis service for data persistence and pub/sub
  redis:
    image: redis:7-alpine
    container_name: pixelcolony-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - pixelcolony-network

  # PixelColony backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: pixelcolony-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9229:9229" # Debug port for development
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - PORT=8080
      - LOG_LEVEL=debug
      - PRETTY_PRINT_LOGS=true
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/logs:/app/logs
      - backend_node_modules:/app/node_modules
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - pixelcolony-network

  # Redis Commander for development (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: pixelcolony-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis:redis:6379
    depends_on:
      - redis
    profiles:
      - dev-tools
    networks:
      - pixelcolony-network

  # Nginx for load balancing (future scaling)
  nginx:
    image: nginx:alpine
    container_name: pixelcolony-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    profiles:
      - production
    networks:
      - pixelcolony-network

volumes:
  redis_data:
    driver: local
  backend_node_modules:
    driver: local

networks:
  pixelcolony-network:
    driver: bridge
