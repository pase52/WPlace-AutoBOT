# Production docker-compose configuration
services:
  # Redis with persistence and clustering config
  redis:
    image: redis:7-alpine
    container_name: pixelcolony-redis-prod
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - pixelcolony-network

  # PixelColony backend service (production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: pixelcolony-backend-prod
    restart: always
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - PORT=8080
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - LOG_FILE=/app/logs/pixelcolony.log
      - PRETTY_PRINT_LOGS=false
      - RATE_LIMIT_ENABLED=true
      - CORS_ENABLED=true
      - CORS_ORIGIN=https://wplace.live
      - HELMET_ENABLED=true
      - COMPRESSION_ENABLED=true
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - pixelcolony-network

  # Nginx load balancer
  nginx:
    image: nginx:alpine
    container_name: pixelcolony-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - pixelcolony-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pixelcolony-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    profiles:
      - monitoring
    networks:
      - pixelcolony-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: pixelcolony-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    profiles:
      - monitoring
    networks:
      - pixelcolony-network

volumes:
  redis_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pixelcolony-network:
    driver: bridge
